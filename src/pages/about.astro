---
import '../styles/global.css';
import BaseLayout from '../layouts/BaseLayout.astro';
import Nav from '../components/Nav.astro';
const pageHeading = "About Me"
---

<BaseLayout pageHeading={pageHeading}>
    <script>
        import * as THREE from 'three'
        import { OrbitControls } from 'three/addons/controls/OrbitControls.js'

        const scene = new THREE.Scene()

        const camera = new THREE.OrthographicCamera()
        camera.position.set(
            1.0898792499739813,
            1.1668411315814589,
            -1.019962970082336
        );
        camera.zoom =1.343730062631455;

        let renderer = new THREE.WebGLRenderer()
        renderer.setSize(window.innerHeight/2, window.innerHeight/2)
        const maxAnisotropy = renderer.capabilities.getMaxAnisotropy();
        const controls = new OrbitControls(camera, renderer.domElement)

        const geometry = new THREE.BoxGeometry()
        const loader = new THREE.TextureLoader()
        loader.setPath('/')
        function getTexture(filename : string) {
            let x = loader.load(filename)
            x.colorSpace = THREE.SRGBColorSpace;
            x.anisotropy = maxAnisotropy
            return new THREE.MeshBasicMaterial({map: x})
        }
        // six materials, one for each face of the cube
        const materials = [
            getTexture('fedora.png'),
            getTexture('me.png'),
            getTexture('konqi.png'),
            getTexture('tux.png'),
            getTexture('me.png'),
            getTexture('tux.png'),
        ]

        const cube = new THREE.Mesh(geometry, materials)
        scene.add(cube)

        window.addEventListener('resize', onWindowResize, false)
        function onWindowResize() {
            camera.updateProjectionMatrix()
            renderer.setSize(window.innerHeight/2, window.innerHeight/2)
            render()
        }

        function animate() {
            requestAnimationFrame(animate)
            controls.update()
            render()
        }

        function render() {
            renderer.render(scene, camera)
        }
        animate()
        const canvasElem = document.getElementById("canvas");
        if(canvasElem !== null)
            canvasElem.prepend(renderer.domElement);
    </script>
	<a href="https://github.com/skyprincegamer/" slot="logo"><img alt="My logo" src="/me.png" class=" log w-24 mr-auto ml-auto my-3 lg:absolute lg:top-0 lg:right-0" ></a>
	<br>
	<hr>
		I am a beginner dev. I use Linux <em>(Fedora 42 with KDE Plasma 6).</em> I hope that 2025 is the <em> year of the of the Linux desktop!	</em>

		<figure class="flex justify-center md:hidden gap-5 my-10 ">
		<img src="https://upload.wikimedia.org/wikipedia/commons/3/35/Tux.svg" alt="Linux Mascot Tux">
		<img src="https://community.kde.org/images.community/thumb/4/40/Mascot_konqi.png/500px-Mascot_konqi.png" alt="KDE Mascot Konqi" class="k">
		<img src="https://1.bp.blogspot.com/-Wea2H_0Os8A/VnPDF1MebUI/AAAAAAAAAT8/fYjvz8u-DeI/s1600/original1.907498.1.jpg"
		   alt="Fedora Logo">
	</figure>
	<br>
    <div class="hidden md:grid md:place-items-center " id="canvas">
    <em>its a cubeeeee . try to move it !!</em>
    </div>
	<figcaption class="text-center block"> Tux (Linux Mascot) ,  Konqi (KDE Mascot) and Fedora</figcaption>
	<style>
		img{
			@apply rounded-lg bg-white dark:bg-black w-28 shadow-2xl shadow-black h-28 opacity-85 hover:opacity-100;
			transition: all 0.2s;
		}
		.k{
			@apply h-auto
		}
		.log{
			@apply shadow-none rounded-full opacity-100 hover:animate-pulse block;
			transition: none;
		}

	</style>
	<Nav/>
</BaseLayout>
